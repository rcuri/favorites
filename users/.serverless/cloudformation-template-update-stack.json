{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "SignUnderscoreupLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/users-dev-sign_up"
      }
    },
    "SignUnderscoreinLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/users-dev-sign_in"
      }
    },
    "ConfirmUnderscoreemailUnderscoreaddressLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/users-dev-confirm_email_address"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "users",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/users-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/users-dev*:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "cognito-idp:AdminAddUserToGroup"
                  ],
                  "Resource": {
                    "Fn::GetAtt": [
                      "FavoritesUserPool",
                      "Arn"
                    ]
                  }
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "users",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "SignUnderscoreupLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/users/dev/1660219049536-2022-08-11T11:57:29.536Z/users.zip"
        },
        "Handler": "src/handlers/sign_up.handler",
        "Runtime": "python3.8",
        "FunctionName": "users-dev-sign_up",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "FAVORITES_USER_POOL_ID": {
              "Fn::Sub": "${FavoritesUserPool}"
            },
            "FAVORITES_USER_POOL_CLIENT_ID": {
              "Fn::Sub": "${CognitoFavoritesPoolClient}"
            },
            "AWAITING_VERIFICATION_GROUP_NAME": "dev-users-verification-pending-group",
            "AWAITING_VERIFICATION_ROLE_NAME": "dev-users-verification-pending-role",
            "CONFIRMED_USER_GROUP_NAME": "dev-users-confirmed-user-group",
            "CONFIRMED_USER_ROLE_NAME": "dev-users-confirmed-user-role"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "SignUnderscoreupLogGroup"
      ]
    },
    "SignUnderscoreinLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/users/dev/1660219049536-2022-08-11T11:57:29.536Z/users.zip"
        },
        "Handler": "src/handlers/sign_in.handler",
        "Runtime": "python3.8",
        "FunctionName": "users-dev-sign_in",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "FAVORITES_USER_POOL_ID": {
              "Fn::Sub": "${FavoritesUserPool}"
            },
            "FAVORITES_USER_POOL_CLIENT_ID": {
              "Fn::Sub": "${CognitoFavoritesPoolClient}"
            },
            "AWAITING_VERIFICATION_GROUP_NAME": "dev-users-verification-pending-group",
            "AWAITING_VERIFICATION_ROLE_NAME": "dev-users-verification-pending-role",
            "CONFIRMED_USER_GROUP_NAME": "dev-users-confirmed-user-group",
            "CONFIRMED_USER_ROLE_NAME": "dev-users-confirmed-user-role"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "SignUnderscoreinLogGroup"
      ]
    },
    "ConfirmUnderscoreemailUnderscoreaddressLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/users/dev/1660219049536-2022-08-11T11:57:29.536Z/users.zip"
        },
        "Handler": "src/handlers/confirm_email_address.handler",
        "Runtime": "python3.8",
        "FunctionName": "users-dev-confirm_email_address",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "FAVORITES_USER_POOL_ID": {
              "Fn::Sub": "${FavoritesUserPool}"
            },
            "FAVORITES_USER_POOL_CLIENT_ID": {
              "Fn::Sub": "${CognitoFavoritesPoolClient}"
            },
            "AWAITING_VERIFICATION_GROUP_NAME": "dev-users-verification-pending-group",
            "AWAITING_VERIFICATION_ROLE_NAME": "dev-users-verification-pending-role",
            "CONFIRMED_USER_GROUP_NAME": "dev-users-confirmed-user-group",
            "CONFIRMED_USER_ROLE_NAME": "dev-users-confirmed-user-role"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ConfirmUnderscoreemailUnderscoreaddressLogGroup"
      ]
    },
    "HttpApi": {
      "Type": "AWS::ApiGatewayV2::Api",
      "Properties": {
        "Name": "dev-users",
        "ProtocolType": "HTTP"
      }
    },
    "HttpApiStage": {
      "Type": "AWS::ApiGatewayV2::Stage",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "StageName": "$default",
        "AutoDeploy": true,
        "DefaultRouteSettings": {
          "DetailedMetricsEnabled": false
        }
      }
    },
    "SignUnderscoreupLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SignUnderscoreupLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationSignUnderscoreup": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "SignUnderscoreupLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 6500
      }
    },
    "HttpApiRoutePostSignup": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /sign_up",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationSignUnderscoreup"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationSignUnderscoreup"
    },
    "SignUnderscoreinLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SignUnderscoreinLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationSignUnderscorein": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "SignUnderscoreinLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 6500
      }
    },
    "HttpApiRoutePostSignin": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /sign_in",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationSignUnderscorein"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationSignUnderscorein"
    },
    "ConfirmUnderscoreemailUnderscoreaddressLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ConfirmUnderscoreemailUnderscoreaddressLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationConfirmUnderscoreemailUnderscoreaddress": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "ConfirmUnderscoreemailUnderscoreaddressLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 6500
      }
    },
    "HttpApiRoutePostConfirmemailaddress": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /confirm_email_address",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationConfirmUnderscoreemailUnderscoreaddress"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationConfirmUnderscoreemailUnderscoreaddress"
    },
    "AwaitingVerificationGroup": {
      "Type": "AWS::Cognito::UserPoolGroup",
      "Properties": {
        "Description": "Users in group have access limited until email is verified",
        "GroupName": "dev-users-verification-pending-group",
        "RoleArn": {
          "Fn::GetAtt": [
            "AwaitingVerificationRole",
            "Arn"
          ]
        },
        "UserPoolId": {
          "Fn::Sub": "${FavoritesUserPool}"
        }
      }
    },
    "AwaitingVerificationRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "RoleName": "dev-users-verification-pending-role",
        "Policies": [
          {
            "PolicyName": "PendingVerificationLimitedAccess",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "lambda:InvokeFunction"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "ConfirmedUserGroup": {
      "Type": "AWS::Cognito::UserPoolGroup",
      "Properties": {
        "Description": "Users in group have access limited until email is verified",
        "GroupName": "dev-users-confirmed-user-group",
        "RoleArn": {
          "Fn::GetAtt": [
            "AwaitingVerificationRole",
            "Arn"
          ]
        },
        "UserPoolId": {
          "Fn::Sub": "${FavoritesUserPool}"
        }
      }
    },
    "ConfirmedUserRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "RoleName": "dev-users-confirmed-user-role",
        "Policies": [
          {
            "PolicyName": "PendingVerificationLimitedAccess",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "lambda:InvokeFunction"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "FavoritesUserPool": {
      "Type": "AWS::Cognito::UserPool",
      "Properties": {
        "UserPoolName": "dev-users-favorites-user-pool",
        "Policies": {
          "PasswordPolicy": {
            "MinimumLength": 8
          }
        },
        "UsernameAttributes": [
          "email"
        ],
        "AutoVerifiedAttributes": [
          "email"
        ],
        "Schema": [
          {
            "AttributeDataType": "String",
            "Name": "email",
            "Required": true
          },
          {
            "AttributeDataType": "String",
            "Name": "first_name",
            "Mutable": true
          },
          {
            "AttributeDataType": "String",
            "Name": "last_name",
            "Mutable": true
          }
        ]
      }
    },
    "CognitoFavoritesPoolClient": {
      "Type": "AWS::Cognito::UserPoolClient",
      "Properties": {
        "UserPoolId": {
          "Fn::Sub": "${FavoritesUserPool}"
        },
        "ClientName": "dev-users-favorites-user-pool-client",
        "GenerateSecret": false,
        "ExplicitAuthFlows": [
          "ALLOW_USER_PASSWORD_AUTH",
          "ALLOW_REFRESH_TOKEN_AUTH"
        ],
        "TokenValidityUnits": {
          "AccessToken": "minutes",
          "RefreshToken": "days"
        },
        "RefreshTokenValidity": 1,
        "AccessTokenValidity": 10
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      },
      "Export": {
        "Name": "sls-users-dev-ServerlessDeploymentBucketName"
      }
    },
    "HttpApiId": {
      "Description": "Id of the HTTP API",
      "Value": {
        "Ref": "HttpApi"
      },
      "Export": {
        "Name": "sls-users-dev-HttpApiId"
      }
    },
    "HttpApiUrl": {
      "Description": "URL of the HTTP API",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "HttpApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            }
          ]
        ]
      },
      "Export": {
        "Name": "sls-users-dev-HttpApiUrl"
      }
    },
    "favoritesUserPool": {
      "Value": {
        "Ref": "FavoritesUserPool"
      }
    },
    "favoritesUserPoolClientArn": {
      "Value": {
        "Ref": "CognitoFavoritesPoolClient"
      }
    },
    "userPoolArn": {
      "Value": {
        "Fn::GetAtt": [
          "FavoritesUserPool",
          "Arn"
        ]
      }
    },
    "userPoolProviderName": {
      "Value": {
        "Fn::GetAtt": [
          "FavoritesUserPool",
          "ProviderName"
        ]
      }
    },
    "userPoolProviderURL": {
      "Value": {
        "Fn::GetAtt": [
          "FavoritesUserPool",
          "ProviderURL"
        ]
      }
    }
  }
}